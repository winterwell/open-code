/**
 * 
 */
package com.winterwell.web;

import java.io.File;
import java.lang.reflect.Field;
import java.util.Arrays;
import java.util.Collections;
import java.util.Comparator;
import java.util.List;
import java.util.logging.Level;

import com.winterwell.utils.Printer;
import com.winterwell.utils.StrUtils;
import com.winterwell.utils.Utils;
import com.winterwell.utils.io.FileUtils;
import com.winterwell.utils.log.Log;
import com.winterwell.utils.web.WebUtils;

/**
 * Take the constants from a Java class and export them for use in javascript.
 * This helps avoid errors from magic strings not matching up.
 * 
 * @author daniel
 *
 */
public class ExportContants {

	
	private Class klass;

	public ExportContants(Class klass) {
		this.klass = klass;
	}
	
	boolean useEnumFormat;
	private String var;
	
	 /** @param var The js variable to set (possibly including a namespace). 
	 * Can be null (for <code>var MyClass = new Enum()</code>)*/
	public void setVar(String var) {
		assert var==null || ( ! Utils.isBlank(var));
		this.var = var;
	}
	
	/**
	 * 
	 * @param useEnumFormat 
	 */
	public void setUseEnumFormat(boolean useEnumFormat) {
		this.useEnumFormat = useEnumFormat;
	}
	
	
	public String toString() {
		try {
			return "ExportConstants["+toJS("")+"]";
		} catch (IllegalAccessException e) {
			return "ExportConstants["+var+"]";
		}
	}
	
	File js;
	
	public void writeJS() throws Exception {
		String name = klass.getSimpleName();
		// TODO refactor
		if (js==null) js = new File("web/static/code/base/"+name+".js");
		StringBuilder page = toJS(name);
		FileUtils.write(js, page);
		Log.report("Constants written to "+js.getPath(), Level.INFO);
	}

	private StringBuilder toJS(String name) throws IllegalAccessException {
		StringBuilder page = new StringBuilder();
		if (js!=null) {
			page.append("/* file: "+js.getName()+" auto-generated from "+		
				name+".java\nDO NOT EDIT THIS FILE (changes here will be lost) */\n");			
			page.append("\"use strict\";\n");
		}
		String _var = Utils.or(var, name);
		page.append("var "+_var+" = {\n");
		List<Field> fs = Arrays.asList(klass.getFields());
		// alphabetical order
		Collections.sort(fs, new Comparator<Field>() {
			@Override
			public int compare(Field o1, Field o2) {
				return o1.getName().compareTo(o2.getName());
			}
		});
		for(Field f : fs) {
			if ( ! java.lang.reflect.Modifier.isStatic(f.getModifiers())) continue;
			Object v = f.get(null);
			page.append(f.getName()+":\""+WebUtils.scriptEncode(""+v)+"\",\n");
		}
		
		// TODO enum style, var MyKind = new Enum('TEXT PERSON');
		
		StrUtils.pop(page, 2);
		page.append("\n};");
		return page;
	}

	public void sysout() {
		Printer.out(this);
	}

}
